// Problem: 160. Intersection of Two Linked Lists  
// Link: https://leetcode.com/problems/intersection-of-two-linked-lists/  
// Time Complexity: O(m + n)  
// Space Complexity: O(1)  
// Approach: Two pointers starting from each list, switch heads when reaching null.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        
      ListNode* h1 = headA;
        ListNode* h2 = headB;

        while(h1 != h2) {
            h1 = h1 ? h1 -> next : headB;
            h2 = h2 ? h2 -> next: headA;
        }
        return h1;
    }
};
